{"name":"Tesseract WinRT","tagline":"Tesseract WinRT (Windows Phone/Windows Store Apps) ","body":"This project is a fork of Tesseract Open Source OCR, modified for the WinRT platform (Windows Phone/Windows Store Apps)\r\n\r\nCurrently it is only a proof of concept, it provides a wrapper class that contains a few configuration methods plus the methods `TesseractRect`, `SetImage` and `GetUTF8Text` from the `TessBaseAPI` class. It depends on [Leptonica WinRT](https://github.com/yoisel/leptonica_1.72_winrt) as source code generating a lib file, while the rest of the regular Tesseract and Leptonica dependencies are all disabled.\r\n\r\nSome internal features might be also disabled as result of the restrictions imposed by the WinRT platform, or the missing dependencies.\r\n\r\nCompressed image formats like png and jpeg are still supported as input and will be decompressed on the fly using WIC (Windows Imaging Component).\r\n\r\nThere is one project in the solution for generating a VSIX package (a visual studio extension), just for the UWP platform with Visual Studio 2015 at the moment.\r\n\r\nThere is one C# sample project that shows how to use the library.\r\n\r\n#### Supported platforms: \r\nWindows Store Apps -> Windows 8.1, Windows Phone 8.1 and UWP<br>\r\n(Windows 8 might come later, Windows Phone 8 however...)\r\n\r\n#### Supported CPU architectures: \r\nx86, x64 and ARM (since this is a native library, the AnyCPU configuration cannot be supported).\r\n\r\nGive it a try:\r\n\r\n        async private void button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            FileOpenPicker openPicker = new FileOpenPicker();\r\n            openPicker.ViewMode = PickerViewMode.Thumbnail;\r\n            openPicker.SuggestedStartLocation = PickerLocationId.PicturesLibrary;\r\n            openPicker.FileTypeFilter.Add(\".jpg\");\r\n            openPicker.FileTypeFilter.Add(\".jpeg\");\r\n            openPicker.FileTypeFilter.Add(\".png\");\r\n            openPicker.FileTypeFilter.Add(\".bmp\");\r\n\r\n            StorageFile file = await openPicker.PickSingleFileAsync();\r\n            if (file != null)\r\n            {\r\n                try\r\n                {\r\n                    BitmapImage bitmapImage = new BitmapImage();\r\n\r\n                    IRandomAccessStream stream = await file.OpenReadAsync();\r\n                    await bitmapImage.SetSourceAsync(stream);\r\n                    image.Source = bitmapImage;\r\n\r\n                    Tesseract.BaseApiWinRT tessBaseApi = new Tesseract.BaseApiWinRT();\r\n\r\n                    StorageFolder tessdataFolderobj = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFolderAsync(\"tessdata\");\r\n                    await tessBaseApi.InitAsync(tessdataFolderobj.Path, \"eng\");\r\n\r\n                    Rect winrtRect = new Rect(0, 0, 10000, 10000);\r\n                    string result = await tessBaseApi.TesseractRectAsync(stream, winrtRect);\r\n\r\n                    textBlock.Text = result;\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    textBlock.Text = \"ERROR!!! - \" + ex.Message;\r\n                }\r\n            }\r\n        }\r\n\r\nLicensed under the Apache License, same as the original Tesseract source code.","google":"UA-69781218-1","note":"Don't delete this file! It's used internally to help with page regeneration."}